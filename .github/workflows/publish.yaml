# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#publishing-using-gradle

name: Publish

on:
  release:
    types: [created]

jobs:
  publish:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
          persist-credentials: false
    - name: Reconfigure git to use HTTP authentication
      run: >
        git config --global url."https://github.com/".insteadOf ssh://git@github.com/
    - name: Setup nodejs
      uses: actions/setup-node@v1
      with:
        node-version: '10'
    - run: npm ci

    - name: Get version
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    
    - name: Set version
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run: |
        git config --global user.name 'Publish'
        git config --global user.email '' 
        npm version ${{ env.RELEASE_VERSION }} -m "Version updated to %s automatically"
        git log
        git push "https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY" HEAD:master

    - name: Package vsix
      uses: lannonbr/vsce-action@master
      with:
        args: "package"

    - name: Get release
      id: get_release
      uses: bruceadams/get-release@v1.2.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload vsix
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }} # This pulls from the GET RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./botbuilder-${{ env.RELEASE_VERSION }}.vsix
        asset_name: botbuilder-${{ env.RELEASE_VERSION }}.vsix
        asset_content_type: application/vsix

    - name: Publish extension
      uses: lannonbr/vsce-action@master
      with:
        args: "publish -p $VSCE_TOKEN"
      env:
        VSCE_TOKEN: ${{ secrets.VSCE_TOKEN }}